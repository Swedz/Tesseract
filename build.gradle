plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

configurations {
    runtimeClasspath.extendsFrom localImplementation
    compileClasspath.extendsFrom localImplementation
}

version = "${mod_version}+${minecraft_version}"
group = mod_group_id
base {
    archivesName = artifact_name
}

repositories {
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "Modmaven"
        url = "https://modmaven.dev"
        content {
            // GrandPower
            includeGroup "dev.technici4n"
            // MI
            includeGroup "aztech"
        }
    }
    maven {
        name = "shedaniel"
        url = "https://maven.shedaniel.me"
        content {
            // Cloth Config
            includeGroup "me.shedaniel.cloth"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases/"
        content {
            // EMI
            includeGroup "dev.emi"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    localImplementation "dev.emi:emi-neoforge:${emi_version}+${minecraft_version}"

    if (project.runtime_include_mi.toBoolean()) {
        localImplementation "aztech:Modern-Industrialization:${modern_industrialization_version}"
        localImplementation "dev.technici4n:GrandPower:${grandpower_version}"
        localImplementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"
    } else {
        compileOnly "aztech:Modern-Industrialization:${modern_industrialization_version}"
        compileOnly "dev.technici4n:GrandPower:${grandpower_version}"
        compileOnly "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"
    }
}

tasks.named('jar') {
    from "LICENSE"
}

task sourceJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
    from "LICENSE"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.artifact_name

            artifact(sourceJar) {
                classifier "sources"
            }
        }
    }

    repositories {
        mavenLocal()

        maven {
            credentials {
                username = System.getenv("MODMAVEN_USERNAME")
                password = System.getenv("MODMAVEN_PASSWORD")
            }
            name = "modmaven"
            url = "https://modmaven.dev/artifactory/local-releases/"
        }
    }
}

minecraft {
    accessTransformers {
        file("src/main/resources/${mod_id}.accesstransformer.cfg")
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        programArguments.addAll '--username', 'Swedz', '--uuid', 'a2dca537-693e-4ded-ac4b-c4006dd4d382'

        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id

        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        systemProperty 'mixin.debug.export', 'true'
        systemProperty 'mixin.debug.verbose', 'true'
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()

        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        systemProperty 'mixin.debug.export', 'true'
        systemProperty 'mixin.debug.verbose', 'true'
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version                     : minecraft_version,
            minecraft_version_range               : minecraft_version_range,
            neoforge_version                      : neoforge_version,
            neoforge_version_range                : neoforge_version_range,
            loader_version_range                  : loader_version_range,
            mod_id                                : mod_id,
            mod_name                              : mod_name,
            mod_version                           : version,
            mod_authors                           : mod_authors,
            mod_description                       : mod_description,
            mod_github                            : mod_github,
            modern_industrialization_version_range: modern_industrialization_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

processResources {
    exclude(".cache")
}